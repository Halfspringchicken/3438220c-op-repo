pipeline {
    agent any
    
    stages {
        stage('Op-3438220c-S1') {
            steps {
                script {
                    // Remove old QA backup if exists
                    sh 'sudo docker rmi -f qa-bkup-image || true'  # || true prevents failure
                    
                    // Create new QA backup
                    sh 'sudo docker commit 3438220c-qa-svr qa-bkup-image'
                    
                    // Update QA server
                    sh 'bolt script run "/operate/3438220c/3438220c_script" --targets 3438220c-qa-svr'
                    
                    echo "Op-S1-3438220c: QA web server is backup and updated"
                }
            }
        }
        
        stage('Op-3438220c-S2') {
            steps {
                script {
                    // Test QA server
                    sh 'curl -Is http://localhost:33200 | head -n 1 > /tmp/qa-result-file'
                    def qaResult = readFile('/tmp/qa-result-file').trim()
                    
                    echo "QA Test Result: ${qaResult}"
                    
                    if(qaResult != "HTTP/1.1 200 OK") {
                        error("QA server test failed")
                    }
                    
                    echo "Op-3438220c-S2: QA server is running after update"
                }
            }
        }
        
        stage('Op-3438220c-S3') {
            steps {
                script {
                    // Manual approval to proceed or rollback
                    def proceed = input(
                        id: 'proceed', 
                        message: 'Proceed to Prod or Rollback QA?', 
                        parameters: [
                            choice(
                                choices: ['Proceed', 'Rollback'],
                                description: 'Choose action',
                                name: 'ACTION'
                            )
                        ]
                    )
                    
                    if(proceed == 'Rollback') {
                        // Rollback QA
                        sh 'docker stop 3438220c-qa-svr && docker rm 3438220c-qa-svr'
                        sh 'docker run -d --name 3438220c-qa-svr --network 3438220c-net --ip 192.168.100.110 --hostname 3438220c-qa-svr.localdomain -p 33200:80 qa-bkup-image'
                        echo "Op-3438220c-S3: QA server fails after update and is rolled back"
                        error('Aborting')
                    } else {
                        echo "Op-3438220c-S3: Proceed to roll out to Prod server"
                    }
                }
            }
        }
        
        stage('Op-3438220c-S4') {
            steps {
                script {
                    // Remove old Prod backup if exists
                    sh 'sudo docker rmi -f prod-bkup-image || true'
                    
                    // Create new Prod backup
                    sh 'sudo docker commit 3438220c-prod-svr prod-bkup-image'
                    
                    // Update Prod server
                    sh 'bolt script run "/operate/3438220c/3438220c_script" --targets 3438220c-prod-svr'
                    
                    echo "Op-3438220c-S4: Prod web server is backup and updated"
                }
            }
        }
        
        stage('Op-3438220c-S5') {
            steps {
                script {
                    // Test Prod server
                    sh 'curl -Is http://localhost:33500 | head -n 1 > /tmp/prod-result-file'
                    def prodResult = readFile('/tmp/prod-result-file').trim()
                    
                    echo "Prod Test Result: ${prodResult}"
                    
                    if(prodResult != "HTTP/1.1 200 OK") {
                        error("Prod server test failed")
                    }
                    
                    echo "Op-3438220c-S5: Prod server is running after update"
                }
            }
        }
        
        stage('Op-3438220c-S6') {
            steps {
                script {
                    // Manual approval to release or rollback
                    def release = input(
                        id: 'release', 
                        message: 'Release to production or Rollback Prod?', 
                        parameters: [
                            choice(
                                choices: ['Release', 'Rollback'],
                                description: 'Choose action',
                                name: 'ACTION'
                            )
                        ]
                    )
                    
                    if(release == 'Rollback') {
                        // Rollback Prod
                        sh 'docker stop 3438220c-prod-svr && docker rm 3438220c-prod-svr'
                        sh 'docker run -d --name 3438220c-prod-svr --network 3438220c-net --ip 192.168.100.220 --hostname 3438220c-prod-svr.localdomain -p 33500:80 prod-bkup-image'
                        echo "Op-3438220c-S6: Prod web server is rolled back"
                        error('Aborting')
                    } else {
                        echo "Op-3438220c-S6: Proceed to release Prod web server to production"
                    }
                }
            }
        }
        
        stage('Op-3438220c-S7') {
            steps {
                echo "Op-3438220c-S7: Prod web server is monitored and ready to serve."
            }
        }
    }
    
    post {
        failure {
            echo "Pipeline failed - check logs for details"
        }
        success {
            echo "Pipeline completed successfully"
        }
    }
}
